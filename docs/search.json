{"Typealiases.html#/s:5Strux7Ordereda":{"name":"Ordered","abstract":"<p>Type of the comparator that can be supplied to the BSTree constructors to provide an order if the tree values"},"Structs/Queue.html#/s:s25ExpressibleByArrayLiteralP0cD7ElementQa":{"name":"ArrayLiteralElement","parent_name":"Queue"},"Structs/Queue.html#/s:Sl10startIndex0B0Qzvp":{"name":"startIndex","parent_name":"Queue"},"Structs/Queue.html#/s:Sl8endIndex0B0Qzvp":{"name":"endIndex","parent_name":"Queue"},"Structs/Queue.html#/s:5Strux5QueueV12arrayLiteralACyxGxd_tcfc":{"name":"init(arrayLiteral:)","abstract":"<p>Constructor using array literal.</p>","parent_name":"Queue"},"Structs/Queue.html#/s:5Strux5QueueV3addyyxF":{"name":"add(_:)","abstract":"<p>Adds (enqueues) an item. Complexity is <em>O(1)</em>.</p>","parent_name":"Queue"},"Structs/Queue.html#/s:5Strux5QueueV6removexSgyF":{"name":"remove()","abstract":"<p>Removes (dequeues) an item from the opposite end of the queue from which items are added.","parent_name":"Queue"},"Structs/Queue.html#/s:5Strux5QueueV4peekxSgyF":{"name":"peek()","abstract":"<p>Return the next item to be removed (dequeued) without actually removing it.","parent_name":"Queue"},"Structs/Queue.html#/s:Sly7ElementQz5IndexQzcip":{"name":"subscript(_:)","parent_name":"Queue"},"Structs/Queue.html#/s:Sl5index5after5IndexQzAD_tF":{"name":"index(after:)","parent_name":"Queue"},"Structs/Heap.html#/s:Sl10startIndex0B0Qzvp":{"name":"startIndex","parent_name":"Heap"},"Structs/Heap.html#/s:Sl8endIndex0B0Qzvp":{"name":"endIndex","parent_name":"Heap"},"Structs/Heap.html#/s:5Strux4HeapV5isMin14startingValuesACyxGSb_SayxGtcfc":{"name":"init(isMin:startingValues:)","abstract":"<p>Public interface ************************</p>","parent_name":"Heap"},"Structs/Heap.html#/s:5Strux4HeapV4pushyyxF":{"name":"push(_:)","abstract":"<p>Push an item onto the heap. Complexity is <em>O(log(n)</em>).</p>","parent_name":"Heap"},"Structs/Heap.html#/s:5Strux4HeapV3popxSgyF":{"name":"pop()","abstract":"<p>Remove and return the min or max value from the heap. Complexity is <em>O(log(n))</em>.</p>","parent_name":"Heap"},"Structs/Heap.html#/s:5Strux4HeapV4peekxSgyF":{"name":"peek()","abstract":"<p>Return the min or max value of the heap. Complexity is <em>O(1)</em>.</p>","parent_name":"Heap"},"Structs/Heap.html#/s:5Strux4HeapV6removeyyxF":{"name":"remove(_:)","abstract":"<p>Remove the first occurrence of the given item from the heap. Complexity is <em>O(n)</em>.</p>","parent_name":"Heap"},"Structs/Heap.html#/s:5Strux4HeapV9removeAllyyxF":{"name":"removeAll(_:)","abstract":"<p>Remove all occurrences of the given item from the heap. Complexity is <em>O(n)</em>.</p>","parent_name":"Heap"},"Structs/Heap.html#/s:5Strux4HeapV5clearyyF":{"name":"clear()","abstract":"<p>Remove all items from the heap.</p>","parent_name":"Heap"},"Structs/Heap.html#/s:Sly7ElementQz5IndexQzcip":{"name":"subscript(_:)","parent_name":"Heap"},"Structs/Heap.html#/s:Sl5index5after5IndexQzAD_tF":{"name":"index(after:)","parent_name":"Heap"},"Structs/BSTreeIndex.html#/s:SQ2eeoiySbx_xtFZ":{"name":"==(_:_:)","parent_name":"BSTreeIndex"},"Structs/BSTreeIndex.html#/s:SL1loiySbx_xtFZ":{"name":"<(_:_:)","parent_name":"BSTreeIndex"},"Structs/BSTreeIndex.html":{"name":"BSTreeIndex","abstract":"<p>Non-numeric index type of BSTree.</p>"},"Structs/Heap.html":{"name":"Heap","abstract":"<p>Min (default) or max heap. A heap is a tree-based data structure that can be used to efficiently"},"Structs/Queue.html":{"name":"Queue","abstract":"<p>Standard queue (FIFO) - items are added at one end of the queue, and removed from the other."},"Classes/DisjointSetTree.html#/s:5Strux11DisjointSetCACyxGycfc":{"name":"init()","abstract":"<p>Undocumented</p>","parent_name":"DisjointSetTree"},"Classes/DisjointSetTree.html#/s:5Strux11DisjointSetC5unionyyx_xtF":{"name":"union(_:_:)","abstract":"<p>Put two values in the same subset (make them have the same root).</p>","parent_name":"DisjointSetTree"},"Classes/DisjointSetTree.html#/s:5Strux11DisjointSetC4findyxxF":{"name":"find(_:)","abstract":"<p>Return the root value of the given value. Two values v1 and v2 are in the same subset if find(v1) = find(v2).</p>","parent_name":"DisjointSetTree"},"Classes/DisjointSetTree.html#/s:5Strux11DisjointSetC5clearyyF":{"name":"clear()","abstract":"<p>Clear the set, i.e. remove all associations and make it like a newly-created DisjointSetTree.</p>","parent_name":"DisjointSetTree"},"Classes/DisjointSetTree.html#/s:5Strux11DisjointSetC11descriptionSSvp":{"name":"description","abstract":"<p>A string that is a newline-separated list of &ldquo;&lt;value&gt;: root = find(&lt;value&gt;)&rdquo;, giving for each value in","parent_name":"DisjointSetTree"},"Classes/BSTree.html#/s:5Strux6BSTreeC7isValidSbvp":{"name":"isValid","abstract":"<p>True if the tree is a valid binary search tree, meaning that the value of the root node is","parent_name":"BSTree"},"Classes/BSTree.html#/s:5Strux6BSTreeC10isBalancedSbvp":{"name":"isBalanced","abstract":"<p>True if the tree is balanced, meaning that the height of the left subtree of the root is no more","parent_name":"BSTree"},"Classes/BSTree.html#/s:5Strux6BSTreeC7orderedACyxGSbx_xtc_tcfc":{"name":"init(ordered:)","abstract":"<p>Initialize with comparator (optional if T is Comparable).</p>","parent_name":"BSTree"},"Classes/BSTree.html#/s:5Strux6BSTreeC10countedSet7orderedACyxGSo09NSCountedD0C_Sbx_xtctcfc":{"name":"init(countedSet:ordered:)","abstract":"<p>Initialize with an NSCountedSet and comparator (optional if T is Comparable).</p>","parent_name":"BSTree"},"Classes/BSTree.html#/s:5Strux6BSTreeC_7orderedACyxGqd___Sbx_xtctc7ElementQyd__RszSTRd__lufc":{"name":"init(_:ordered:)","abstract":"<p>Initialize with an unsorted sequence of values, which can contain duplicates, and a comparator","parent_name":"BSTree"},"Classes/BSTree.html#/s:5Strux6BSTreeC4copy4withyp10ObjectiveC6NSZoneVSg_tF":{"name":"copy(with:)","abstract":"<p>Returns a copy of the tree (a shallow copy if T is a reference type).</p>","parent_name":"BSTree"},"Classes/BSTree.html#/s:5Strux6BSTreeC6insertyyxF":{"name":"insert(_:)","abstract":"<p>Insert the given value into the tree. If the value is already in the tree, the count is incremented","parent_name":"BSTree"},"Classes/BSTree.html#/s:5Strux6BSTreeC6insertyyxd_tF":{"name":"insert(_:)","abstract":"<p>Insert multple values separated by commas. Time complexity: <em>O(log(Nm))</em> , where m is the number of","parent_name":"BSTree"},"Classes/BSTree.html#/s:5Strux6BSTreeC6insert_5countyx_SitF":{"name":"insert(_:count:)","abstract":"<p>Insert the given number of the given value into the tree. If the value is already in the tree,","parent_name":"BSTree"},"Classes/BSTree.html#/s:5Strux6BSTreeC6insertyyqd__7ElementQyd__RszSTRd__lF":{"name":"insert(_:)","abstract":"<p>Insert multiple values from a sequence. Time complexity: <em>O(log(Nm))</em>, where m is the number","parent_name":"BSTree"},"Classes/BSTree.html#/s:5Strux6BSTreeC6removeyyxF":{"name":"remove(_:)","abstract":"<p>Remove one of the given value from the tree. If the number of the value already in the tree is","parent_name":"BSTree"},"Classes/BSTree.html#/s:5Strux6BSTreeC6removeyyxd_tF":{"name":"remove(_:)","abstract":"<p>Remove multple values separated by commas. Time complexity: <em>O(log(Nm))</em>, where m is the number of","parent_name":"BSTree"},"Classes/BSTree.html#/s:5Strux6BSTreeC6remove_5countyx_SitF":{"name":"remove(_:count:)","abstract":"<p>Remove the given number of the given value from the tree. If the given number is &gt;= the number","parent_name":"BSTree"},"Classes/BSTree.html#/s:5Strux6BSTreeC6removeyyqd__7ElementQyd__RszSTRd__lF":{"name":"remove(_:)","abstract":"<p>Remove from the tree the values given in a sequence. Time complexity: <em>O(log(Nm))</em>, where m is the","parent_name":"BSTree"},"Classes/BSTree.html#/s:5Strux6BSTreeC9removeAllyyxF":{"name":"removeAll(_:)","abstract":"<p>Remove all occurrences of the given value from the tree.","parent_name":"BSTree"},"Classes/BSTree.html#/s:5Strux6BSTreeC5clearyyF":{"name":"clear()","abstract":"<p>Remove all values from the tree. Time complexity: <em>O(1)</em></p>","parent_name":"BSTree"},"Classes/BSTree.html#/s:5Strux6BSTreeC5indexyAA0B5IndexVyxGSgxF":{"name":"index(_:)","abstract":"<p>Return the index (<code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/BSTreeIndex.html\">BSTreeIndex</a></code>) of the value, or nil if the tree doesn&rsquo;t have the value.","parent_name":"BSTree"},"Classes/BSTree.html#/s:5Strux6BSTreeC8containsySbxF":{"name":"contains(_:)","abstract":"<p>Return true if the tree contains the given value, false otherwise.","parent_name":"BSTree"},"Classes/BSTree.html#/s:5Strux6BSTreeC5countySixF":{"name":"count(_:)","abstract":"<p>Returns the count of the value in the tree. Zero if the tree doesn&rsquo;t contain the value.","parent_name":"BSTree"},"Classes/BSTree.html#/s:5Strux6BSTreeC12ceilingIndexyAA0bD0VyxGSgxF":{"name":"ceilingIndex(_:)","abstract":"<p>Returns the index of the least value &gt;= the given value, according to the ordering given by the","parent_name":"BSTree"},"Classes/BSTree.html#/s:5Strux6BSTreeC12ceilingValueyxSgxF":{"name":"ceilingValue(_:)","abstract":"<p>Returns the least value &gt;= the given value, according to the ordering given by the","parent_name":"BSTree"},"Classes/BSTree.html#/s:5Strux6BSTreeC10floorIndexyAA0bD0VyxGSgxF":{"name":"floorIndex(_:)","abstract":"<p>Returns the index of the greatest value &lt;= the given value, according to the ordering given by the","parent_name":"BSTree"},"Classes/BSTree.html#/s:5Strux6BSTreeC10floorValueyxSgxF":{"name":"floorValue(_:)","abstract":"<p>Returns the greatest value &lt;= the given value, according to the ordering given by the","parent_name":"BSTree"},"Classes/BSTree.html#/s:5Strux6BSTreeC11higherIndexyAA0bD0VyxGSgxF":{"name":"higherIndex(_:)","abstract":"<p>Returns the index of the least value &gt; the given value, according to the ordering given by the","parent_name":"BSTree"},"Classes/BSTree.html#/s:5Strux6BSTreeC11higherValueyxSgxF":{"name":"higherValue(_:)","abstract":"<p>Returns the least value &gt; the given value, according to the ordering given by the","parent_name":"BSTree"},"Classes/BSTree.html#/s:5Strux6BSTreeC10lowerIndexyAA0bD0VyxGSgxF":{"name":"lowerIndex(_:)","abstract":"<p>Returns the index of the greatest value &lt; the given value, according to the ordering given by the","parent_name":"BSTree"},"Classes/BSTree.html#/s:5Strux6BSTreeC10lowerValueyxSgxF":{"name":"lowerValue(_:)","abstract":"<p>Returns the greatest value &lt; the given value, according to the ordering given by the","parent_name":"BSTree"},"Classes/BSTree.html#/s:5Strux6BSTreeC5countSivp":{"name":"count","abstract":"<p>The number of elements (unique values) in the tree (NOT the sum of all value counts, which is","parent_name":"BSTree"},"Classes/BSTree.html#/s:5Strux6BSTreeC10totalCountSivp":{"name":"totalCount","abstract":"<p>The sum of all value counts.","parent_name":"BSTree"},"Classes/BSTree.html#/s:5Strux6BSTreeC6heightSivp":{"name":"height","abstract":"<p>The height of the tree, i.e. the number of levels minus 1. An empty tree has height -1, a","parent_name":"BSTree"},"Classes/BSTree.html#/s:5Strux6BSTreeC10firstIndexAA0bD0VyxGSgvp":{"name":"firstIndex","abstract":"<p>Index of the first value in the tree, according to the ordering given by the comparator,","parent_name":"BSTree"},"Classes/BSTree.html#/s:5Strux6BSTreeC10firstValuexSgvp":{"name":"firstValue","abstract":"<p>The first value in the tree, according to the ordering given by the comparator,","parent_name":"BSTree"},"Classes/BSTree.html#/s:5Strux6BSTreeC9lastIndexAA0bD0VyxGSgvp":{"name":"lastIndex","abstract":"<p>Index of the last value in the tree, according to the ordering given by the comparator, or nil","parent_name":"BSTree"},"Classes/BSTree.html#/s:5Strux6BSTreeC9lastValuexSgvp":{"name":"lastValue","abstract":"<p>The last value in the tree, according to the ordering given by the comparator, or nil","parent_name":"BSTree"},"Classes/BSTree.html#/s:5Strux6BSTreeC13medianIndicesSayAA0B5IndexVyxGGvp":{"name":"medianIndices","abstract":"<p>Returns the indices of zero, one, or two median values. There will be zero indices if and only if","parent_name":"BSTree"},"Classes/BSTree.html#/s:5Strux6BSTreeC12medianValuesSayxGvp":{"name":"medianValues","abstract":"<p>Returns zero, one, or two median values. There will be zero values if and only if","parent_name":"BSTree"},"Classes/BSTree.html#/s:5Strux6BSTreeC15traverseInOrderSayx5value_Si5counttGyF":{"name":"traverseInOrder()","abstract":"<p>Return the elements of the tree in sorted order from first to last, according to the ordering","parent_name":"BSTree"},"Classes/BSTree.html#/s:5Strux6BSTreeC16traversePreOrderSayx5value_Si5counttGyF":{"name":"traversePreOrder()","abstract":"<p>Return the elements of the tree in &ldquo;pre&rdquo; order, meaning that the root is the first","parent_name":"BSTree"},"Classes/BSTree.html#/s:5Strux6BSTreeC17traversePostOrderSayx5value_Si5counttGyF":{"name":"traversePostOrder()","abstract":"<p>Return the elements of the tree in &ldquo;post&rdquo; order, meaning that the root is the last","parent_name":"BSTree"},"Classes/BSTree.html#/s:5Strux6BSTreeC15traverseByLevelSayx5value_Si5counttGyF":{"name":"traverseByLevel()","abstract":"<p>Return the elements of the tree in &ldquo;level&rdquo; order, starting with the root and working downward.</p>","parent_name":"BSTree"},"Classes/BSTree.html#/s:5Strux6BSTreeC12toCountedSetSo09NSCountedE0CyF":{"name":"toCountedSet()","abstract":"<p>Returns an NSCountedSet with the same values and counts as the tree.</p>","parent_name":"BSTree"},"Classes/BSTree.html#/s:5Strux6BSTreeC12toValueArraySayxGyF":{"name":"toValueArray()","abstract":"<p>Returns an array of the values in the tree, in order, and with duplicates, if there are any values with","parent_name":"BSTree"},"Classes/BSTree.html#/s:5Strux6BSTreeC2eeoiySbACyxG_AEtFZ":{"name":"==(_:_:)","abstract":"<p>Returns true if the two trees have the same values and value counts. They don&rsquo;t necessarily need","parent_name":"BSTree"},"Classes/BSTree.html#/s:5Strux6BSTreeC11descriptionSSvp":{"name":"description","abstract":"<p>An ASCII-graphics depiction of the tree.</p>","parent_name":"BSTree"},"Classes/BSTree.html#/s:5Strux6BSTreeC21descriptionWithHeightSSvp":{"name":"descriptionWithHeight","abstract":"<p>An ASCII-graphics depiction of the tree, with the height of each node given.</p>","parent_name":"BSTree"},"Classes/BSTree.html#/s:5Strux6BSTreeC19descriptionWithNextSSvp":{"name":"descriptionWithNext","abstract":"<p>Description with each node&rsquo;s &ldquo;next&rdquo; and &ldquo;prev&rdquo; pointers shown.</p>","parent_name":"BSTree"},"Classes/BSTree.html#/s:5Strux6BSTreeC24descriptionWithNodeCountSSvp":{"name":"descriptionWithNodeCount","abstract":"<p>Description with each node&rsquo;s node count (the number of nodes in the subtree having that node as root)","parent_name":"BSTree"},"Classes/BSTree.html#/s:5Strux6BSTreeC25descriptionWithTotalCountSSvp":{"name":"descriptionWithTotalCount","abstract":"<p>Description with each node&rsquo;s total count (the sum of all valueCount&rsquo;s in the subtree having that node","parent_name":"BSTree"},"Classes/BSTree.html#/s:Sl10startIndex0B0Qzvp":{"name":"startIndex","parent_name":"BSTree"},"Classes/BSTree.html#/s:Sl8endIndex0B0Qzvp":{"name":"endIndex","parent_name":"BSTree"},"Classes/BSTree.html#/s:Sly7ElementQz5IndexQzcip":{"name":"subscript(_:)","parent_name":"BSTree"},"Classes/BSTree.html#/s:SK5index5after5IndexQzAD_tF":{"name":"index(after:)","parent_name":"BSTree"},"Classes/BSTree.html#/s:SK5index6before5IndexQzAD_tF":{"name":"index(before:)","parent_name":"BSTree"},"Classes/BSTree.html#/s:5Strux6BSTreeCAASLRzrlEACyxGycfc":{"name":"init()","abstract":"<p>Initialize the tree with a default comparator of the type&rsquo;s &lsquo;&lt;&rsquo; operator.</p>","parent_name":"BSTree"},"Classes/BSTree.html#/s:5Strux6BSTreeCAASLRzrlE10countedSetACyxGSo09NSCountedD0C_tcfc":{"name":"init(countedSet:)","abstract":"<p>Initialize with an NSCountedSet.</p>","parent_name":"BSTree"},"Classes/BSTree.html#/s:5Strux6BSTreeCAASLRzrlEyACyxGqd__c7ElementQyd__RszSTRd__lufc":{"name":"init(_:)","abstract":"<p>Initialize with an unsorted sequence of values, which can contain duplicates.</p>","parent_name":"BSTree"},"Classes/BSTree.html#/s:5Strux6BSTreeCAASLRzrlEyACyxGxd_tcfc":{"name":"init(_:)","abstract":"<p>Initialize with a comma-separated list of values, which can contain duplicates.</p>","parent_name":"BSTree"},"Classes/BSTree.html#/s:5Strux6BSTreeCAAs18AdditiveArithmeticRzrlE3sumxvp":{"name":"sum","abstract":"<p>The sum of each value times its count. Time complexity: <em>O(1)</em></p>","parent_name":"BSTree"},"Classes/BSTree.html":{"name":"BSTree","abstract":"<p>A counted, self-balancing (AVL) binary search tree. Counted means that there are no duplicate nodes"},"Classes/DisjointSetTree.html":{"name":"DisjointSetTree","abstract":"<p>A disjoint-set data structure, also known as union-find or merge-find. The data structure stores"},"Classes.html":{"name":"Classes","abstract":"<p>The following classes are available globally.</p>"},"Structs.html":{"name":"Structures","abstract":"<p>The following structures are available globally.</p>"},"Typealiases.html":{"name":"Type Aliases","abstract":"<p>The following type aliases are available globally.</p>"}}
